// <auto-generated />
using System;
using HospitalBB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalBB.Migrations
{
    [DbContext(typeof(HospitalBBContextClass))]
    partial class HospitalBBContextClassModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalBB.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("AdminEmail")
                        .IsUnique()
                        .HasFilter("[AdminEmail] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HospitalBB.Models.Appointment", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"));

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorDocId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Issue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AppId");

                    b.HasIndex("DoctorDocId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalBB.Models.Doctor", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<int>("DocAge")
                        .HasColumnType("int");

                    b.Property<string>("DocDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocPhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HospitalBB.Models.Patient", b =>
                {
                    b.Property<int>("PatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentAppId")
                        .HasColumnType("int");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorsDocId")
                        .HasColumnType("int");

                    b.Property<string>("PatEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatPhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("PatId");

                    b.HasIndex("AppointmentAppId");

                    b.HasIndex("DoctorsDocId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalBB.Models.Appointment", b =>
                {
                    b.HasOne("HospitalBB.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorDocId");

                    b.HasOne("HospitalBB.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalBB.Models.Patient", b =>
                {
                    b.HasOne("HospitalBB.Models.Appointment", null)
                        .WithMany("Patients")
                        .HasForeignKey("AppointmentAppId");

                    b.HasOne("HospitalBB.Models.Doctor", "Doctors")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorsDocId");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalBB.Models.Appointment", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalBB.Models.Doctor", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
